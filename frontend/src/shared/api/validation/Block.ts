// Generated by ts-to-zod
import { z } from "zod";

export enum BlockStatus {
    PUBLISHED = 1,
    DEVELOPING = 2,
    MODERATION = 3,
    ARCHIVED = 4,
}

export const blockStatusSchema = z.nativeEnum(BlockStatus);

const Category = z.object({
    id: z.number(),
    name: z.string(),
    position: z.number(),
});

export const blockDataArraySchema = z.object({
    info: z.object({
        limit: z.number(),
        count: z.number(),
        pages: z.number(),
        next_page: z.string().nullable(),
        prev_page: z.string().nullable(),
    }),
    items: z.array(
        z.object({
            id: z.number(),
            name: z.string(),
            preview_src: z.string().nullable(),
            status: blockStatusSchema,
            structure: z.string().optional().nullable(),
            created_at: z.string(),
            updated_at: z.string(),
            categories: z.array(Category),
            favourite: z.number(),
            user_id: z.number(),
        })
    ),
});

export const shortBlockDataArraySchema = z.object({
    info: z.object({
        limit: z.number(),
        count: z.number(),
        pages: z.number(),
        next_page: z.string().nullable(),
        prev_page: z.string().nullable(),
    }),
    items: z.array(
        z.object({
            id: z.number(),
            name: z.string(),
            preview_src: z.string().nullable(),
            status: blockStatusSchema,
            created_at: z.string(),
            updated_at: z.string(),
            categories: z.array(Category),
            favourite: z.number(),
            user_id: z.number(),
        })
    ),
});

export const blockIdSchema = z.number();

const pOSTdataSchema = z.object({
    name: z.string(),
    structure: z.string().optional(),
    preview_src: z.string().optional(),
    category_id: z.array(z.number()),
    status: blockStatusSchema.nullable().optional(),
});
